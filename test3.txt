
1.JAVA面向对象编程
面向过程：编程的范式（C语言-----行为）
面向对象：能进行显示生活的抽象
面向接口编程
面向切面编程

函数式编程范式   ----Scala,Koltin
lamdba表达式        （）->{ }

面向对象的三大特征：
a.封装:
将客观事物封装为抽象的类，并且类可以吧自己的数据和方法只让可信的类或对象操作，对不可信的进行信息隐藏。内部操作对不可信外部而言不可见（保护性）。

b.继承：
继承是指可以使用现有类的所有功能，并且在无须重复编写原有类的情况下对原有类上的功能进行扩展。

c.多态（！！！！）：
多态：一个类实例的相同方法在不同情形下有不同的表现形式。
多态机制使得具有不同内部结构的对象可以共享外部相同的接口。

OO：面向对象
OOA：面向对象分析
OOD：面向对象设计
OOP：面向对象编程
2.类与对象的定义与使用
类：指的是共性的概念，二对象是一个具体的，可以使用的事物
首先先有类（类是生产对象的蓝图），问候才可以产生对象。对象所具有的所有行为与属性，一定是在类中进行了完整的定义。

类中的组成：
a.方法（操作的行为）
b.属性（操作的数据，每个对象应该具有的特征）

JAVA中类的定义语法
class  类名称{
     属性类型  属性名称1；
     属性类型  属性名称2；
     ......

     方法1（）{ }
     方法2（）{ }
     ......
}

类中的属性与方法不再由主方法直接调用，而需要通过对象来调用。

对象声明语法：
类名称  对象名称 = new  类名称（）；

2.2   类与对象内存分析
new  关键字，在堆上开辟空间
栈内存（虚拟机局部变量表）：存放的是局部变量（包含各种基本数据类型，对象引用--对象的名称）
堆内存：保存真正对象（对象属性数据）

对象（引用数据类型）必须在实例化后调用，否则会出现NullPointerException（运行时异常）

对象的引用
垃圾空间：没有任何占内存指向的堆内存空间

3. private实现封装处理
让内部操作对外部不可见（在类的外部不能直接使用对象来操控属性），可以用private对属性进行封装，称为类的私有属性。

JAVA规范：所有私有属性要想访问与设置内容，提供对应的getter与setter方法
getter方法：取得属性内容
setter方法：进行属性内容的设置与更改

类的设计原则：
a.类中的所有属性必须使用private封装
b.属性若要被外部访问，必须定义相应的getter与setter方法


4.构造方法
特点：
a.方法名称必须与类名称相同
b.构造方法没有返回值类型声明（！！！）（void也是一种返回值类型）（JAVA中通过有无返回值类型来判断该方法是构造方法还是普通方法**********）
c.每个类至少存在一个构造方法（没有明确定义，系统默认生成一个无参构造）
d.若类中定义了构造方法，则默认的无参构造不再生成

构造方法的重载：参数的个数不同（类型只能是类中的属性类型）

JAVA规范：进行类定义是遵循以下原则
    a.先定义属性
    b.构造方法（构造方法按照个数大小排列）
    c.普通方法

匿名对象：没有占用内存指向


5.this关键字
a.this调用本类属性
this.属性名   明确表示调用类中同名属性
规范：在类的普通方法中访问本类属性，一定要加this关键字

b.this调用本类方法
调用普通方法：  this.方法名称（参数）
调用构造方法：  this（参数）
    （1）this调用本类其他构造方法必须放在首行调用   ---编译期语法错误
    （2）this调用构造方法不允许成环  ---编译期语法错误

c.this表示当前对象

6.static关键字
6.1  static属性（类属性）----通过类名调用    
-------被static修饰的变量存放在全局数据区
    a.访问static属性应该使用类名称.属性名（类属性）--描述共享概念（所有对象共享一个数据）
    b.所有的非static属性（实例属性）必须在对象实例化后使用，而static属性（类属性）不受对象实例化控制，直接通过类名调用。
         虽然与对象无关，但是有默认值

6.2  static方法（类方法，静态方法）-----与对象实例化无关，通过类名直接调用，常见于工具类方法
        main方法
        System.arraycopy（）
        Arrays.sort( )
        System.copyOf( )

静态方法不能访问类中普通属性，可以访问类中的静态属性
普通方法可以访问类中的静态属性，也可以访问类中的普通属性

6.3   static  可以修饰内部类，不可以修饰外部类

